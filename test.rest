// =================================
// VARIABLES
// =================================
@baseUrl = http://127.0.0.1:8000
@username = group_3
@password = User@1234
@userId = 1
@postId = 1
@commentId = 1

@Token = a57b76c82adb74aaf8dd1b57270902280fee43fc

// =================================
// AUTHENTICATION
// =================================

// Option 1: Get Token (rest_framework.authtoken)
POST {{baseUrl}}/api/token/
Content-Type: application/json

{
  "username": "{{username}}",
  "password": "{{password}}"
}

###

// Option 2: Get JWT (rest_framework_simplejwt)
POST {{baseUrl}}/api/jwt/
Content-Type: application/json

{
  "username": "{{username}}",
  "password": "{{password}}"
}

###

// Option 3: Refresh JWT Token
POST {{baseUrl}}/api/jwt/refresh/
Content-Type: application/json

{
  "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTc0MjY3NDU3MiwiaWF0IjoxNzQyMDY5NzcyLCJqdGkiOiJmZWZlOTk4ZTZkNGM0YmZkYWFlM2E2YzcyNTA2MTIxNyIsInVzZXJfaWQiOjF9.upNdJWMV6gfC_uBYVXjslFpbttTzYxOykjSwEO8WFD4"
}

###

// =================================
// USER OPERATIONS
// =================================

// 4 List all users
GET {{baseUrl}}/api/posts/users/
Authorization: Token a57b76c82adb74aaf8dd1b57270902280fee43fc

###

// 5 Create a new user
POST {{baseUrl}}/api/posts/users/
Content-Type: application/json

{
  "username": "user4",
  "email": "testuser4@example.com",
  "password": "User4@1234"
}

###

// 5 Get specific user
GET {{baseUrl}}/api/posts/users/{{userId}}/
Authorization: Token a57b76c82adb74aaf8dd1b57270902280fee43fc

###

//5.  Follow a user
POST {{baseUrl}}/api/posts/users/2/follow/
Authorization: Token a57b76c82adb74aaf8dd1b57270902280fee43fc

###

//6. Unfollow a user
DELETE {{baseUrl}}/api/posts/users/2/follow/
Authorization: Token a57b76c82adb74aaf8dd1b57270902280fee43fc

###

// =================================
// POST OPERATIONS
// =================================

// 7. List all posts
GET {{baseUrl}}/api/posts/posts/
Authorization: Token {{Token}}

###

// 8. Create a new post
POST {{baseUrl}}/api/posts/posts/
Authorization: Token {{Token}}
Content-Type: application/json

{
  "content": "This is a test post created through REST Client",
  "author": {{userId}}
}

###

//9. Get specific post
GET {{baseUrl}}/api/posts/posts/{{postId}}/
Authorization: Token {{Token}}

###

// Update a post
PUT {{baseUrl}}/api/posts/posts/{{postId}}/
Authorization: Token {{Token}}
Content-Type: application/json

{
  "content": "This is an updated post content",
  "author": {{userId}}
}

###

// Delete a post
DELETE {{baseUrl}}/api/posts/posts/{{postId}}/
Authorization: Token your_token_here

###

// Like/unlike a post
POST {{baseUrl}}/api/posts/posts/{{postId}}/like/
Authorization: Token your_token_here

###

// =================================
// COMMENT OPERATIONS
// =================================

//9. Get all comments
GET {{baseUrl}}/api/posts/comments/
Authorization: Token {{Token}}

###

// 10 Create a comment on a post
POST {{baseUrl}}/api/posts/comments/
Authorization: Token {{Token}}
Content-Type: application/json

{
  "text": "This is a test comment",
  "author": {{userId}},
  "post": {{postId}},
  "parent_comment": null
}

###

// 11 Get comments for a specific post
GET {{baseUrl}}/api/posts/posts/{{postId}}/comments/
Authorization: Token {{Token}}

###

// 12. Create a reply to a comment
POST {{baseUrl}}/api/posts/comments/
Authorization: Token {{Token}}
Content-Type: application/json

{
  "text": "This is a reply to a comment",
  "author": {{userId}},
  "post": {{postId}},
  "parent_comment": {{commentId}}
}

###

// =================================
// NEWS FEED
// =================================

//13. Get personalized news feed
GET {{baseUrl}}/api/posts/feed/
Authorization: Token {{Token}}

###

// =================================
// ALTERNATIVE AUTH METHODS
// =================================

//14 Using JWT Token
GET {{baseUrl}}/api/posts/feed/
Authorization: Bearer {{Token}}
